<?xml version="1.0" encoding="utf-8"?>



<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator>
  <link href="https://hpehl.github.io/wildfly.org/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://hpehl.github.io/wildfly.org/" rel="alternate" type="text/html" />
  <updated>2024-01-26T00:00:09+01:00</updated>
  <id>https://hpehl.github.io/wildfly.org</id>

  
  
    <title type="html">WildFly</title>
  

  
    <entry>
      <title type="html">WildFly Feature Development Process</title>
      <link href="https://hpehl.github.io/wildfly.org/news/2023/11/22/WildFly_Feature_Development_Process/" rel="alternate" type="text/html" title="WildFly Feature Development Process" />
      <published>2023-11-22T00:00:00+01:00</published>
      <updated>2023-11-22T00:00:00+01:00</updated>
      <id>https://hpehl.github.io/wildfly.org/news/2023/11/22/WildFly_Feature_Development_Process</id>
      
      
        <content type="html" xml:base="https://hpehl.github.io/wildfly.org/news/2023/11/22/WildFly_Feature_Development_Process/">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some of the developers of WildFly have been thinking about how to clarify and formalize some of the processes we use when developing WildFly, and I want to make the broader WildFly community aware of the discussion.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This post basically duplicates one I recently made on the &lt;a href=&quot;https://lists.jboss.org/archives/list/wildfly-dev@lists.jboss.org/thread/JI5GX7Q2UPGXTDEMZG4F3PNF4BDQKB4A/&quot;&gt;wildfly-dev mail list&lt;/a&gt;. I&amp;#8217;d love to hear your thoughts about this on that mail thread or in &lt;a href=&quot;https://wildfly.zulipchat.com/#narrow/stream/174184-wildfly-developers&quot;&gt;Zulip&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The WildFly project has some pretty high standards around quality, stability and backwards compatibility, and those heavily influence how we go about bringing new features into WildFly. WildFly developers like me who also work on Red Hat JBoss EAP are aware of EAP&amp;#8217;s policies and processes for doing new feature development, and we bring those to how we do our work on WildFly, but WildFly has its own needs and would benefit from more formalized processes of its own.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This thread and other related discussions are intended to drive creation of these kinds of policies, and to work through technical issues that stand in the way.  I’m hoping we can make good progress on this this month, and get something finalized by the end of Q1 next year.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Goals of this effort include:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Making it clear to the WildFly developer community how to go about getting new features into WildFly.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Providing a path for getting &apos;bake&apos; for new features by making them available to those interested in newer, less stable things, while not exposing them to other users who only want more stable features.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Encouraging new or less frequent contributors to consider proposing new features by making it possible to choose an acceptable tradeoff between how broadly their feature will be visible versue the level of effort that fits what they can offer.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Skip ahead to the &lt;a href=&quot;#developing-the-process&quot;&gt;Developing the Process&lt;/a&gt; section if you’re not interested in background / context discussion.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;WildFly is the upstream project from which Red Hat’s JBoss EAP product is derived. Like most software products, EAP has processes that are meant to govern how new functionality gets introduced into the product, in order to ensure the high quality and long-term supportability of the product. EAP is derived from WildFly, and a high percentage of the development work on WildFly is performed by Red Hat engineers who also work on EAP, so it’s natural that the EAP processes have affected how those engineers do their work on WildFly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This has brought a ton of benefit to WildFly, primarily because the EAP requirements help ensure that people other than the developer coding up a feature are involved in the identification of the use cases for and requirements of the feature, and also help ensure the feature is properly documented and tested. People with quality engineering and documentation expertise are involved in the development of the feature, which is very much a good thing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, there are downsides to using EAP processes to guide a lot of WildFly development:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The EAP processes are meant for EAP and are not visible to the WildFly community. An open source software community should be able to see and understand how development work is done. A project with the scope and complexity of WildFly needs processes to ensure quality, but those processes should be WildFly’s own and should be publicly visible. Quasi-borrowing EAP processes doesn’t meet this goal.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The EAP processes can lead to an “all or nothing” effect. They require the involvement of people from different groups within Red Hat before a feature is merged. This is great in general but it can lead to situations where people not being able to prioritize a particular feature blocks it, even though the development of the feature has reached a point where it can offer real value to some WildFly users. If the feature is blocked, those users don’t benefit, and the WildFly developers don’t get the benefit of feedback on the feature from those users or other WildFly developers who would only encounter it once it&amp;#8217;s merged.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;developing-the-process&quot;&gt;Developing the Process&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, what are we doing about this?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The goal is to define the various requirements for what constitutes a high quality feature, and to define a path people working on that feature can follow. The path should include a way for the feature to be made available to some users before it reaches its final form, without exposing it to users who only want finalized features.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that the main focus of this post is on coming up with a suitable process, but there are technical tasks that need to be done to make it practical to expose features to some but not all users and to allow them to best control what they can use in their WildFly installation. A great example of that kind of thing &lt;a href=&quot;https://lists.jboss.org/archives/list/wildfly-dev@lists.jboss.org/thread/4JCTIWREUBBX4DVIJIUAFQ2FWDBN3AXW/&quot;&gt;Paul Ferraro’s work on the management API&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For the process itself, back in September I created a working document to try and capture some of the elements that would go into a possible process:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.google.com/document/d/15_yKhW74-X9s2zUhs_ZUuZ3h-RlMfH5xWmHHsfYf1AA/edit&quot;&gt;WildFly Feature Development Process working document&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The gist of that document is the notion from Paul Ferraro’s work that features can be merged with different initial quality/stability/maturity levels (we plan to use &apos;stablity&apos; as the formal term), as represented by columns in the table, with a given feature expected to be ‘promoted’ over time from columns to the left toward columns to the right.  The rows in the table represent different aspects of ensuring a feature is at a particular stability level. The cells in the table then are quick notes on what requirements would have to be met for a given aspect in order for the feature to be merged at a given stability level.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What I’m hoping is discussion &lt;a href=&quot;https://lists.jboss.org/archives/list/wildfly-dev@lists.jboss.org/thread/JI5GX7Q2UPGXTDEMZG4F3PNF4BDQKB4A/&quot;&gt;the wildfly-dev mail list&lt;/a&gt; and on &lt;a href=&quot;https://wildfly.zulipchat.com/#narrow/stream/174184-wildfly-developers&quot;&gt;Zulip&lt;/a&gt; about all this can help flesh out what’s in that document, rework it as necessary, and eventually lead to a more formal process document.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some details on the stability levels:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Experimental&lt;/strong&gt;&amp;#8201;&amp;#8212;&amp;#8201;This level would be for real bleeding edge stuff. No WildFly distribution zip/tar would enable this level by default.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Preview&lt;/strong&gt;&amp;#8201;&amp;#8212;&amp;#8201;This would be the level for features at a sufficient level to be available by default[1] in WildFly Preview, but not in standard WildFly.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Community&lt;/strong&gt;-- This would be the level for features at a sufficient level to be available by default in standard WildFly.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Default&lt;/strong&gt;&amp;#8201;&amp;#8212;&amp;#8201;Features at this level have gone through additional vetting to ensure they are suitable for the long-term compatibility expectations of the feature pack that provides them. (See &lt;a href=&quot;#relationship-to-feature-packs&quot;&gt;Relationship to Feature Packs&lt;/a&gt; for more on this.)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;[1] Note that ‘available by default’ could but often wouldn’t mean ‘enabled by default’, i.e. turned on in a standard OOTB configuration. It just means a user could turn it on if they so choose using the current configuration mechanisms.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some details on the feature aspects:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Feature Team&lt;/strong&gt;&amp;#8201;&amp;#8212;&amp;#8201;This aspect relates to what people need to be involved with the feature.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Requirements Analysis&lt;/strong&gt;&amp;#8201;&amp;#8212;&amp;#8201;This relates to ensuring the user stories and technical requirements for the feature are thought through and written down. We’ve been doing these for a long time now via the &lt;a href=&quot;https://docs.wildfly.org/wildfly-proposals&quot;&gt;documents&lt;/a&gt; in the &lt;a href=&quot;https://github.com/wildfly/wildfly-proposals/pulls&quot;&gt;wildfly-proposals repo&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Implementation&lt;/strong&gt;&amp;#8201;&amp;#8212;&amp;#8201;The production code aspect of the feature.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Domain transformation&lt;/strong&gt;&amp;#8201;&amp;#8212;&amp;#8201;A specialized production code aspect, related to allowing a current version Domain Controller to manage Host Controllers and servers running an earlier version.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Test plan&lt;/strong&gt;&amp;#8201;&amp;#8212;&amp;#8201;Thinking about and writing down what needs to be tested and how.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Test development&lt;/strong&gt;&amp;#8201;&amp;#8212;&amp;#8201;Writing the tests.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Test verification&lt;/strong&gt;&amp;#8201;&amp;#8212;&amp;#8201;Test review, and verification that the test plan was implemented and that the tests pass.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Documentation&lt;/strong&gt;&amp;#8201;&amp;#8212;&amp;#8201;Proper documentation of the feature.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that it is likely that the set of rows in the table will need expansion, e.g. to capture requirements for things like the HAL web console, cloud images, tooling like WildFly Glow etc.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;relationship-to-feature-packs&quot;&gt;Relationship to Feature Packs&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The main WildFly code base produces three different feature packs, and the main reason there are three and not just one relates to some of the same stability/long-term compatibility concepts that are a key part of the feature development process I’m hoping we create. It’s important that we think carefully about how the feature development process relates to the feature packs, so to help with that I want to talk a bit about how feature packs are meant to work.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ideally for any feature pack, the documentation of that feature pack would include somewhere ‘lifecycle’ information that can help users decide if the feature pack is suitable for their needs. This would cover key elements like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The basic scope of the feature pack.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A likely release cadence for the feature pack.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The expected long-term maintainability and compatibility for the feature pack.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Different expectations for those key elements are prime reasons for creating a new feature pack versus adding functionality to an existing one, or for choosing one feature pack over another for a feature.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Honestly, the WildFly project does a poor job of documenting these things for its feature packs, which is my fault, and is why I need to write some of this in this already looooong post! Anyway…&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;WildFly produces three feature packs from its main repository. All share the same expected release cadence (currently a new feature release roughly quarterly and one bug fix release about a month after a feature release.) The scope of all three is similar and broad&amp;#8201;&amp;#8212;&amp;#8201;they provide functionality to run in, manage or act as a client to an application server process. Their primary differences relate to long-term maintainability and compatibility:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;wildfly-ee&lt;/strong&gt;&amp;#8201;&amp;#8212;&amp;#8201;We don’t talk about this feature pack a lot, often treating it as an internal detail and not producing any downloadable zip/tar built solely using it, but it’s an important piece of our ecosystem.  The defining characteristic of this feature pack is that it integrates technologies where we have the highest confidence in our ability to provide them in a largely compatible way for many years. We’re not perfect about this, we made some mistakes in the early iterations of this feature pack, and we can and will break compatibility if necessary. But we try not to and try to give advance warning if we will. For example, this feature pack provides the Elytron security layer, which was introduced as a replacement for the Picketbox security layer many years before we removed support for the Picketbox layer.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;wildfly&lt;/strong&gt;&amp;#8201;&amp;#8212;&amp;#8201;This feature pack depends upon wildfly-ee and adds functionality in addition to what’s in wildfly-ee. The traditional standard WildFly server zip is built using this feature pack. The primary reason we put things in this feature pack instead of wildfly-ee is because what we’re integrating is more likely to change in incompatible ways over a relatively short time period. For example, MicroProfile specifications are comfortable introducing breaking changes on an annual basis, making them not a great fit for wildfly-ee. The observability space, particularly metrics and tracing, is evolving rapidly, so our Micrometer and OpenTelemetry extensions are not in wildfly-ee.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;wildfly-preview&lt;/strong&gt;&amp;#8201;&amp;#8212;&amp;#8201;This feature pack is all about the fact that it provides no long term guarantees and can change significantly from release.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We need to think more about how feature stability levels relate to this, but here are a few thoughts:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Just because a user wants to use a particular preview or experimental level feature doesn’t mean they want to use an entire preview level feature pack like wildfly-preview. In other words, there is a use case for preview or experimental features in standard WildFly.
On the other hand, we can use WildFly Preview to showcase functionality whose scope is not tied to a particular reasonably scoped ‘feature’. Using it for EE 9 is an obvious example. Not having an embedded messaging broker in the OOTB configs is not a ‘feature’. IOW there is a use case for WildFly Preview even if standard WildFly has preview features.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What we mean by the ‘Community’ and ‘Default’ levels is “relative to” the generally expected long-term maintainability and compatibility level of the feature pack that provides it. In other words, just because a feature provided by the wildfly feature pack has been vetted as suitable for the ‘Default’ level doesn’t mean it comes with higher expectations than the feature pack as a whole. If we provide a specification, and we integrate it in a way that is highly stable and very well tested, but then the spec changes in a year in a significantly incompatible way, then we may have to as well.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I’d love to hear your thoughts and questions, either on the &lt;a href=&quot;https://lists.jboss.org/archives/list/wildfly-dev@lists.jboss.org/thread/JI5GX7Q2UPGXTDEMZG4F3PNF4BDQKB4A/&quot;&gt;wildfly-dev mail list thread&lt;/a&gt;, in &lt;a href=&quot;https://wildfly.zulipchat.com/#narrow/stream/174184-wildfly-developers&quot;&gt;Zulip&lt;/a&gt; or in comments on the &lt;a href=&quot;https://docs.google.com/document/d/15_yKhW74-X9s2zUhs_ZUuZ3h-RlMfH5xWmHHsfYf1AA/edit&quot;&gt;WildFly Feature Development Process working document&lt;/a&gt; I discussed above. I also encourage you to have a look into &lt;a href=&quot;https://lists.jboss.org/archives/list/wildfly-dev@lists.jboss.org/thread/4JCTIWREUBBX4DVIJIUAFQ2FWDBN3AXW/&quot;&gt;Paul Ferraro’s work&lt;/a&gt; I mentioned above, as well as other technical work that will likely be happening over the next six months.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As I noted at the start, I’m hoping we can have a solid process written and published by the end of Q1 next year, and that we can nail down some of the key concepts over the next few weeks well enough that we can integrate Paul’s work.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Best regards,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Brian&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
      

      
      
      
      
      

      
        <author>
          <name>Brian Stansberry</name>
          
          
        </author>
      

      
        
      

      
        <category term="development" />
      

      
        <summary type="html">Some of the developers of WildFly have been thinking about how to clarify and formalize some of the processes we use when developing WildFly, and I want to make the broader WildFly community aware of the discussion.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Change the default encoding of the audit log file in WildFly</title>
      <link href="https://wildfly-security.github.io/wildfly-elytron/blog/specify-file-audit-log-encoding/" rel="alternate" type="text/html" title="Change the default encoding of the audit log file in WildFly" />
      <published>2023-11-16T00:00:00+01:00</published>
      <updated>2023-11-16T00:00:00+01:00</updated>
      <id>https://wildfly-security.github.io/wildfly-elytron/blog/specify-file-audit-log-encoding/</id>
      
      
        <content type="html" xml:base="https://wildfly-security.github.io/wildfly-elytron/blog/specify-file-audit-log-encoding/"></content>
      

      
      
      
      
      

      
        <author>
          <name>Ilia Vassilev</name>
          
          
        </author>
      

      
        
      

      
        <category term="audit-logging" />
      
        <category term="encoding" />
      

      

      
      
    </entry>
  
    <entry>
      <title type="html">Identity Propagation with OpenID Connect</title>
      <link href="https://wildfly-security.github.io/wildfly-elytron/blog/wildfly-oidc-identity-propagation/" rel="alternate" type="text/html" title="Identity Propagation with OpenID Connect" />
      <published>2023-11-15T00:00:00+01:00</published>
      <updated>2023-11-15T00:00:00+01:00</updated>
      <id>https://wildfly-security.github.io/wildfly-elytron/blog/wildfly-oidc-identity-propagation/</id>
      
      
        <content type="html" xml:base="https://wildfly-security.github.io/wildfly-elytron/blog/wildfly-oidc-identity-propagation/"></content>
      

      
      
      
      
      

      
        <author>
          <name>Farah Juma</name>
          
          
        </author>
      

      
        
      

      
        <category term="oidc" />
      
        <category term="identity" />
      
        <category term="propagation" />
      
        <category term="ejb" />
      

      

      
      
    </entry>
  
    <entry>
      <title type="html">Manual GitHub Actions Workflow in WildFly</title>
      <link href="https://hpehl.github.io/wildfly.org/news/2023/11/13/github-manual-workflow/" rel="alternate" type="text/html" title="Manual GitHub Actions Workflow in WildFly" />
      <published>2023-11-13T00:00:00+01:00</published>
      <updated>2023-11-13T00:00:00+01:00</updated>
      <id>https://hpehl.github.io/wildfly.org/news/2023/11/13/github-manual-workflow</id>
      
      
        <content type="html" xml:base="https://hpehl.github.io/wildfly.org/news/2023/11/13/github-manual-workflow/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;GitHub actions workflow is a valuable tool that automates development process and continuous integration. While it&amp;#8217;s
great to see every pull request can be verified automatically upon submission, sometimes we also like the flexibility
to tweak which OS, JDK distribution and version to use, which tests to run, which maven options to specify, or which
system properties to apply. Basically, a more customizable build environment and testing plan targeted for a particular
issue at hand. This is what a manual workflow is for. This post will walk you through how to do this in WildFly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;use-cases-for-manual-workflow&quot;&gt;Use cases for manual workflow&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A pull request in WildFly usually triggers more than 10 CI jobs, and some of them take hours to complete.
The Manual workflow in WildFly can greatly reduce the duration and resource consumption via parameterization, and perform
the desired verification without the overhead of a full-blown CI cycle. And below are some more occasions where manual
workflow is a good fit:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The build takes too long on your local machine.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You want to reproduce certain failures that only occur in GitHub CI settings, but not on your local machine.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You want to build and test WildFly on certain combination of OS and JDK versions not readily available locally.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You want to test your WildFly code changes in a clean environment, without the interference fom other projects.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;how-to-start-manual-workflow&quot;&gt;How to start manual workflow&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First thing to consider is where to run the manual workflow. It depends on your role and permission within WildFly project.
If you are in maintainer role, you can run it in &lt;a href=&quot;https://github.com/wildfly/wildfly/actions&quot;&gt;upstream WildFly repository&lt;/a&gt;,
or your fork of it. Other WildFly contributors and watchers are free to run it in their own fork.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In either case, navigate to the &lt;code&gt;Actions&lt;/code&gt; tab of WildFly repository, choose &lt;code&gt;Manual Build and Test&lt;/code&gt; from the list of
workflows on the left panel, and then click &lt;code&gt;Run workflow&lt;/code&gt; dropdown on the right-side panel. The following is a sample
screenshot of various configurations available in the dropdown menu:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/img/news/manual-github-actions-workflow.png&quot; alt=&quot;Manual workflow&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;manual-workflow-parameters&quot;&gt;Manual workflow parameters&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Branch&lt;/code&gt;: Choose the branch your wish to run against, typically a topic branch containing some new code you want to verify.
It defaults to &lt;code&gt;main&lt;/code&gt; branch. This is the standard GitHub branch selector with quick filtering.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;OS&lt;/code&gt;: Choose the runner operating system, either &lt;code&gt;ubuntu-latest&lt;/code&gt; or &lt;code&gt;windows-latest&lt;/code&gt;. It defaults to &lt;code&gt;ubuntu-latest&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;JDK Distribution&lt;/code&gt;: Choose the JDK distribution to build and test WildFly. It defaults to &lt;code&gt;temurin&lt;/code&gt; and supports the
following distributions. For more information,
see &lt;a href=&quot;https://github.com/actions/setup-java#supported-distributions&quot;&gt;setup-java action docs&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;temurin&lt;/code&gt;: Eclipse Temurin&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;semeru&lt;/code&gt;: IBM Semeru Runtime Open Edition&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;microsoft&lt;/code&gt;: Microsoft Build of OpenJDK&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;oracle&lt;/code&gt;: Oracle JDK&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;zulu&lt;/code&gt;: Azul Zulu OpenJDK&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;corretto&lt;/code&gt;: Amazon Corretto Build of OpenJDK&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;liberica&lt;/code&gt;: Liberica JDK&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;jdk-version&lt;/code&gt;: Enter JDK version, a string value that is an exact version or a version range using SemVer notation.
It&amp;#8217;s a required parameter with no default. For more information,
see &lt;a href=&quot;https://github.com/actions/setup-java#supported-version-syntax&quot;&gt;setup-java action docs&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;args&lt;/code&gt;: Enter optional, additional maven command options. It defaults to &lt;code&gt;-Dquickly&lt;/code&gt;. Some common args are:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-Dquickly&lt;/code&gt;: activates the &lt;code&gt;quick-build&lt;/code&gt; maven profile, which skips steps like testing, javadoc generation and checkstyle,
For more information, see its &lt;a href=&quot;https://github.com/wildfly/wildfly/blob/main/pom.xml#L1340&quot;&gt;definition in pom.xml&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-DskipTests&lt;/code&gt;: a maven option to skip running tests&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-DallTests&lt;/code&gt;: activates the maven profile that runs all suitable tests&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;other system properties or maven options&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;timeout&lt;/code&gt;: Enter number of minutes beyond which the workflow job will time out. It&amp;#8217;s an optional parameter and defaults
to 120 minutes. How to choose a good timeout value depends largely on the previous parameter, &lt;code&gt;args&lt;/code&gt;, which determines
which maven profile to activate, which tests to run, or which build steps to execute.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
      

      
      
      
      
      

      
        <author>
          <name>Cheng Fang</name>
          
          
        </author>
      

      
        
      

      
        <category term="wildfly" />
      
        <category term="github" />
      
        <category term="continuous-integration" />
      

      
        <summary type="html">GitHub actions workflow is a valuable tool that automates development process and continuous integration. While it&amp;#8217;s great to see every pull request can be verified automatically upon submission, sometimes we also like the flexibility to tweak which OS, JDK distribution and version to use, which tests to run, which maven options to specify, or which system properties to apply. Basically, a more customizable build environment and testing plan targeted for a particular issue at hand. This is what a manual workflow is for. This post will walk you through how to do this in WildFly.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Securing WildFly Apps with OIDC on OpenShift</title>
      <link href="https://wildfly-security.github.io/wildfly-elytron/blog/securing-wildfly-apps-oidc-openshift/" rel="alternate" type="text/html" title="Securing WildFly Apps with OIDC on OpenShift" />
      <published>2023-11-10T00:00:00+01:00</published>
      <updated>2023-11-10T00:00:00+01:00</updated>
      <id>https://wildfly-security.github.io/wildfly-elytron/blog/securing-wildfly-apps-oidc-openshift/</id>
      
      
        <content type="html" xml:base="https://wildfly-security.github.io/wildfly-elytron/blog/securing-wildfly-apps-oidc-openshift/"></content>
      

      
      
      
      
      

      
        <author>
          <name>Ashwin Mehendale</name>
          
          
        </author>
      

      
        
      

      
        <category term="oidc" />
      
        <category term="openshift" />
      
        <category term="keycloak" />
      
        <category term="adapter" />
      
        <category term="galleon-pack" />
      

      

      
      
    </entry>
  
    <entry>
      <title type="html">Adding Support for Integrity Checking to an Existing Filesystem Realm</title>
      <link href="https://wildfly-security.github.io/wildfly-elytron/blog/filesystem-integrity-elytron-tool/" rel="alternate" type="text/html" title="Adding Support for Integrity Checking to an Existing Filesystem Realm" />
      <published>2023-11-09T00:00:00+01:00</published>
      <updated>2023-11-09T00:00:00+01:00</updated>
      <id>https://wildfly-security.github.io/wildfly-elytron/blog/filesystem-integrity-elytron-tool/</id>
      
      
        <content type="html" xml:base="https://wildfly-security.github.io/wildfly-elytron/blog/filesystem-integrity-elytron-tool/"></content>
      

      
      
      
      
      

      
        <author>
          <name>Prarthona Paul</name>
          
          
        </author>
      

      
        
      

      

      

      
      
    </entry>
  
    <entry>
      <title type="html">Developing in the cloud with Eclipse Che</title>
      <link href="https://hpehl.github.io/wildfly.org/news/2023/11/07/Developping-in-the-cloud-with-Eclipse-Che/" rel="alternate" type="text/html" title="Developing in the cloud with Eclipse Che" />
      <published>2023-11-07T06:00:00+01:00</published>
      <updated>2023-11-07T06:00:00+01:00</updated>
      <id>https://hpehl.github.io/wildfly.org/news/2023/11/07/Developping%20in%20the%20cloud%20with%20Eclipse%20Che</id>
      
      
        <content type="html" xml:base="https://hpehl.github.io/wildfly.org/news/2023/11/07/Developping-in-the-cloud-with-Eclipse-Che/">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://eclipse.dev/che/&quot;&gt;Eclipse Che&lt;/a&gt; is a cloud IDE that promises to get rid of the cumbersome setup of your local environment by providing automated setup in the cloud. It can be run easily on Kubernetes or its derivative like OpenShift. The purpose of this blog entry is not to setup Eclipse Che.
In this blog entry we will show you in a first step how you can use Eclipse Che for regular development. On a second step we will resuse the same application and deploy it on Kubernetes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For the video and demo purpose we used Eclipse Che installation on &lt;a href=&quot;https://kubernetes.io/docs/tasks/tools/install-minikube/&quot;&gt;Minikube&lt;/a&gt; following the &lt;a href=&quot;https://eclipse.dev/che/docs/stable/administration-guide/installing-che-on-minikube/&quot;&gt;instructions&lt;/a&gt; with the &lt;a href=&quot;https://eclipse.dev/che/docs/stable/administration-guide/installing-the-chectl-management-tool/&quot;&gt;chectl management tool&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In order to setup our project environment we will use a simple &lt;strong&gt;getting-started&lt;/strong&gt; project which contains only a single REST endpoint and an integration test. In this project we provide also:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a &lt;code&gt;devfile.yaml&lt;/code&gt; to setup and configure the Che workspace. You may learn more about it on &lt;a href=&quot;https://devfile.io&quot; class=&quot;bare&quot;&gt;https://devfile.io&lt;/a&gt; .&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a &lt;code&gt;ContainerFile&lt;/code&gt; to describe how to build our runtime image to be deployed on Kubernetes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a &lt;code&gt;ingress.yaml&lt;/code&gt; file that can server as an example to expose our running service.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;regular-development-on-the-cloud&quot;&gt;Regular development on the cloud&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;creating-our-workspace&quot;&gt;Creating our workspace&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first step is of course to create our workspace, for this you have to paste the following URL &lt;a href=&quot;https://github.com/wildfly-extras/wildfly-devfile-examples/tree/simple-cloud&quot; class=&quot;bare&quot;&gt;https://github.com/wildfly-extras/wildfly-devfile-examples/tree/simple-cloud&lt;/a&gt; .
As you can see this repository is quite simple and provides at its root the &lt;code&gt;devfile.yaml&lt;/code&gt; that will configure our workspace.
Let&amp;#8217;s do a quick analysis of this file content:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;it has a single component using a Universal Developer Image to bring in all the tools that a cloud developer might need.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;it defines the debug port and the ports that can be exposed&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;there is also a volume where the downloaded maven artefacts will be stored to keep them between restarts&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The we have several commands to provide shortcuts to commands a developer might need. They are quite standard and make development life easier but of course you can type them in a terminal if you&amp;#8217;s rather do it that way.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;taking-a-look-at-the-code&quot;&gt;Taking a look at the code&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The code consists of a very basic REST endpont with an &lt;code&gt;index.html&lt;/code&gt; page to call it and display the result. There is also an integration test that will call that endpoint and checks that it returns properly.
If you take a look at the Apache Maven &lt;code&gt;pom.xml&lt;/code&gt; you can see that it uses the &lt;a href=&quot;https://docs.jboss.org/wildfly/plugins/maven/latest/&quot;&gt;WildFly Maven Plugin&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;plugin&amp;gt;
  &amp;lt;groupId&amp;gt;org.wildfly.plugins&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;wildfly-maven-plugin&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;${version.wildfly.maven.plugin}&amp;lt;/version&amp;gt;
  &amp;lt;configuration&amp;gt;
    &amp;lt;feature-packs&amp;gt;
      &amp;lt;feature-pack&amp;gt;
        &amp;lt;location&amp;gt;org.wildfly:wildfly-galleon-pack:${version.jboss.bom}&amp;lt;/location&amp;gt;
      &amp;lt;/feature-pack&amp;gt;
      &amp;lt;feature-pack&amp;gt;
        &amp;lt;location&amp;gt;org.wildfly.cloud:wildfly-cloud-galleon-pack:${version.cloud.fp}&amp;lt;/location&amp;gt;
      &amp;lt;/feature-pack&amp;gt;
    &amp;lt;/feature-packs&amp;gt;
    &amp;lt;layers&amp;gt;
      &amp;lt;!-- layers may be used to customize the server to provision--&amp;gt;
      &amp;lt;layer&amp;gt;cloud-server&amp;lt;/layer&amp;gt;
    &amp;lt;/layers&amp;gt;
    &amp;lt;javaOpts&amp;gt;&amp;lt;/javaOpts&amp;gt;
  &amp;lt;/configuration&amp;gt;
  &amp;lt;executions&amp;gt;
    &amp;lt;execution&amp;gt;
      &amp;lt;goals&amp;gt;
        &amp;lt;goal&amp;gt;package&amp;lt;/goal&amp;gt;
      &amp;lt;/goals&amp;gt;
    &amp;lt;/execution&amp;gt;
  &amp;lt;/executions&amp;gt;
&amp;lt;/plugin&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We use this plugin to provision a server and deploy our application to it. As you can see, we are installing the &lt;code&gt;cloud-server&lt;/code&gt; layer from the &lt;code&gt;wildfly-cloud-galleon-pack&lt;/code&gt; as it makes WildFly behave better in the cloud.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;building-and-debugging&quot;&gt;Building and debugging&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can see on the demo, we provide three commands for reglar development (&apos;InnerLoop&apos;) :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;the first one builds the application, provisions the server and executes the integration test&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the second one provisions and starts the server with the application in &lt;code&gt;dev&lt;/code&gt; mode: this means that whenever the code changes the server is automatically updated. It is covered in more details &lt;a href=&quot;https://www.wildfly.org/news/2023/03/09/WildFly-Maven-Plugin/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the third one provisions and starts the server with the application in &lt;code&gt;dev&lt;/code&gt; mode with debug enabled so you can debug the application and also take advantage of the dev mode.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note you can use a terminal to execute those commands or your own. For example you can start the provisionned server with the regular &lt;code&gt;standalone.sh&lt;/code&gt; in &lt;strong&gt;target/server/bin&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;YouTube video player&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/Riw0IcWUW98?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;deploying-to-the-cloud&quot;&gt;Deploying to the cloud&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;creating-the-secret&quot;&gt;Creating the secret&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Because we need to make our image available to be deployed on Kubernetes we have to provide the credentials and details on where to push it. In order to do that we need to create a &lt;strong&gt;secret&lt;/strong&gt; in the namespace you are running your workspace on (in my case it is &lt;code&gt;admin-che&lt;/code&gt;). On the devfile the target registry is &lt;strong&gt;quay.io&lt;/strong&gt;, you may change that if you want to use your own image registry.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight nowrap&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;kubectl delete secret quay-secret --namespace admin-che
kubectl create secret generic quay-secret \
  --namespace admin-che \
  --from-literal=IMAGE_REGISTRY_PASSWORD=**** \
  --from-literal=IMAGE_REGISTRY_LOGIN=mylogin@quay.io \
  --from-literal=IMAGE_REGISTRY_NAMESPACE=mylogin
kubectl label secret quay-secret \
  --namespace admin-che \
  controller.devfile.io/mount-to-devworkspace=true \
  controller.devfile.io/watch-secret=true
kubectl annotate secret quay-secret --namespace admin-che controller.devfile.io/mount-as=&apos;env&apos;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The label and the annotation are here so that the secret will be automounted by the Che workspace on start. So you will need to restart the workspace if you created it as in the first part of this article.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;building-the-image&quot;&gt;Building the image&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For this task we are going to use &lt;a href=&quot;https://podman.io/&quot;&gt;Podman&lt;/a&gt; and a very simple &lt;code&gt;ContainerFile&lt;/code&gt; that will take the output of the provisionning task a copy it to a &lt;code&gt;wildfly-runtime&lt;/code&gt; image:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;FROM quay.io/wildfly/wildfly-runtime:latest
COPY --chown=jboss:root target/server $JBOSS_HOME
RUN chmod -R ug+rwX $JBOSS_HOME&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once that image is built we need to push it.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;tagging-and-pushing-the-image&quot;&gt;Tagging and pushing the image&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here again we are going to use Podman to tag the image we just built and push it to our image registry. This task is the the that uses the content of the &lt;strong&gt;secret&lt;/strong&gt; we created. Otherwise it is just regular Podman commands.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;deploying-the-image-on-kubernetes&quot;&gt;Deploying the image on Kubernetes&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now we are going to deploy the image we have built and pushed on Kubernetes. In order to do this we are going to use &lt;a href=&quot;https://docs.wildfly.org/wildfly-charts/&quot;&gt;WildFly Helm Charts&lt;/a&gt;.
The first step is to register the WildFly helm charts then execute &lt;code&gt;helm install&lt;/code&gt; with a few values to customize our deployment:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;--set build.enabled=false&lt;/code&gt; : this indicates that we are using an image that has already been built (in Openshift you can use s2i to automate what we just did before).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;in the .charts/helm.yaml file you will notice that there is a &lt;code&gt;deploy.route.enabled&lt;/code&gt; set to false this is again to override an Openshift feature where the &lt;code&gt;route&lt;/code&gt; to the service is automatically added. In Kubernetes you will have to create the Ingress resource manually (until now at least).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now that the image has been deployed and the service created, you need to expose it by creating the &lt;strong&gt;ingress&lt;/strong&gt; resource.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: getting-started-ingress
  namespace: admin-che
spec:
  ingressClassName: nginx
  rules:
    - host: hello-world.info
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: getting-started
                port:
                  number: 8080&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You may want to change the target host name. In my example I added an entry in my &lt;code&gt;hosts&lt;/code&gt; configuration file mapping &lt;strong&gt;hello-world.info&lt;/strong&gt; to the minikube IP address.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now you can access the service on &lt;a href=&quot;http://hello-world.info&quot; class=&quot;bare&quot;&gt;http://hello-world.info&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;undeploying-the-image&quot;&gt;Undeploying the image&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We provide again a simple command that does a &lt;code&gt;helm uninstall&lt;/code&gt; thus removing the deployment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;YouTube video player&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/WdrIXFKV8r4?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
      

      
      
      
      
      

      
        <author>
          <name>Emmanuel Hugonnet</name>
          
          
        </author>
      

      
        
      

      
        <category term="wildfly" />
      
        <category term="cloud" />
      
        <category term="ide" />
      
        <category term="k8s" />
      
        <category term="devfile" />
      
        <category term="getting-started" />
      

      
        <summary type="html">Eclipse Che is a cloud IDE that promises to get rid of the cumbersome setup of your local environment by providing automated setup in the cloud. It can be run easily on Kubernetes or its derivative like OpenShift. The purpose of this blog entry is not to setup Eclipse Che. In this blog entry we will show you in a first step how you can use Eclipse Che for regular development. On a second step we will resuse the same application and deploy it on Kubernetes.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Open Source Day 2023 Recap</title>
      <link href="https://wildfly-security.github.io/wildfly-elytron/blog/ghc23-osd-recap/" rel="alternate" type="text/html" title="Open Source Day 2023 Recap" />
      <published>2023-10-23T00:00:00+02:00</published>
      <updated>2023-10-23T00:00:00+02:00</updated>
      <id>https://wildfly-security.github.io/wildfly-elytron/blog/ghc23-osd-recap/</id>
      
      
        <content type="html" xml:base="https://wildfly-security.github.io/wildfly-elytron/blog/ghc23-osd-recap/"></content>
      

      
      
      
      
      

      
        <author>
          <name>Diana Krepinska Vilkolakova</name>
          
          
        </author>
      

      
        
      

      

      

      
      
    </entry>
  
    <entry>
      <title type="html">WildFly 30 is released!</title>
      <link href="https://hpehl.github.io/wildfly.org/news/2023/10/18/WildFly30-Released/" rel="alternate" type="text/html" title="WildFly 30 is released!" />
      <published>2023-10-18T00:00:00+02:00</published>
      <updated>2023-10-18T00:00:00+02:00</updated>
      <id>https://hpehl.github.io/wildfly.org/news/2023/10/18/WildFly30-Released</id>
      
      
        <content type="html" xml:base="https://hpehl.github.io/wildfly.org/news/2023/10/18/WildFly30-Released/">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m pleased to announce that the new WildFly and WildFly Preview 30.0.0.Final releases are available for download at &lt;a href=&quot;https://wildfly.org/downloads&quot; class=&quot;bare&quot;&gt;https://wildfly.org/downloads&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new-and-notable&quot;&gt;New and Notable&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An important focus of our work for this release was preparing for the arrival of Java SE 21, the latest LTS JDK release. While we still recommend that you run WildFly on SE 17 or 11 (see &lt;a href=&quot;#java-se-support&quot;&gt;Java SE Support&lt;/a&gt; below for more on why), we do believe WildFly 30 is a great choice for evaluating how your applications run on SE 21.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In particular, I&amp;#8217;m pleased that WildFly 30 is able to &lt;a href=&quot;https://github.com/wildfly/certifications/blob/EE10/WildFly_30.0.0.Final/jakarta-core-jdk21.adoc#jakarta-core-profile-1001-tck-java-se-21-results&quot;&gt;certify&lt;/a&gt; as a compatible Jakarta EE 10 Core Profile implementation when running on SE 21!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;re also able to &lt;a href=&quot;https://github.com/wildfly/certifications/blob/MP6.0/WildFly_30.0.0.Final/microprofile-6.0-selected-specifications/microprofile-6.0-selected-specifications-jdk-21.adoc&quot;&gt;pass the TCKs&lt;/a&gt; for the  MicroProfile specifications we support when running on SE 21.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Special thanks to Richard Opalka, James Perkins and Scott Marlow for all the hard work they put into this.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;supported-specifications&quot;&gt;Supported Specifications&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;jakarta-ee&quot;&gt;Jakarta EE&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;WildFly 30 is a compatible implementation of the EE 10 &lt;a href=&quot;https://jakarta.ee/specifications/platform/10/&quot;&gt;Platform&lt;/a&gt; as well as the &lt;a href=&quot;https://jakarta.ee/specifications/webprofile/10/&quot;&gt;Web Profile&lt;/a&gt; and the &lt;a href=&quot;https://jakarta.ee/specifications/coreprofile/10/&quot;&gt;Core Profile&lt;/a&gt;. WildFly is EE 10 compatible when running on both Java SE 11 and Java SE 17.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Evidence supporting our certification is available in the &lt;a href=&quot;https://github.com/wildfly/certifications/tree/EE10&quot;&gt;WildFly Certifications&lt;/a&gt; repository on GitHub:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Specification&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Compatibility Evidence&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot; rowspan=&quot;2&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Jakarta EE 10 Full Platform&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://github.com/wildfly/certifications/blob/EE10/WildFly_30.0.0.Final/jakarta-full-platform-jdk11.adoc#tck-results&quot;&gt;SE 11&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://github.com/wildfly/certifications/blob/EE10/WildFly_30.0.0.Final/jakarta-full-platform-jdk17.adoc#tck-results&quot;&gt;SE 17&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot; rowspan=&quot;2&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Jakarta EE 10 Web Profile&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://github.com/wildfly/certifications/blob/EE10/WildFly_30.0.0.Final/jakarta-web-profile-jdk11.adoc#tck-results&quot;&gt;SE 11&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://github.com/wildfly/certifications/blob/EE10/WildFly_30.0.0.Final/jakarta-web-profile-jdk17.adoc#tck-results&quot;&gt;SE 17&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot; rowspan=&quot;3&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Jakarta EE 10 Core Profile&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://github.com/wildfly/certifications/blob/EE10/WildFly_30.0.0.Final/jakarta-core-jdk11.adoc#jakarta-core-profile-1001-tck-java-se-11-results&quot;&gt;SE 11&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://github.com/wildfly/certifications/blob/EE10/WildFly_30.0.0.Final/jakarta-core-jdk17.adoc#jakarta-core-profile-1001-tck-java-se-17-results&quot;&gt;SE 17&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://github.com/wildfly/certifications/blob/EE10/WildFly_30.0.0.Final/jakarta-core-jdk21.adoc#jakarta-core-profile-1001-tck-java-se-21-results&quot;&gt;SE 21&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;microprofile&quot;&gt;MicroProfile&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;WildFly supports numerous MicroProfile specifications. Because we no longer support MicroProfile Metrics, WildFly 30 cannot claim to be a compatible implementation of the MicroProfile 6.0 specification. However, WildFly&amp;#8217;s MicroProfile support includes implementations of the following specifications in our &quot;full&quot; (e.g. &lt;code&gt;standalone-full.xml&lt;/code&gt;) and &quot;default&quot; (e.g &lt;code&gt;standalone.xml&lt;/code&gt;) configurations as well as our &quot;microprofile&quot; configurations (e.g. &lt;code&gt;standalone-microprofile.xml&lt;/code&gt;):&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3334%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;MicroProfile Technology&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;WildFly Full/Default Configurations&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;WildFly MicroProfile Configuration&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;MicroProfile Config 3.0&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;X&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;X&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;MicroProfile Fault Tolerance 4.0&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&amp;#8201;&amp;#8212;&amp;#8201;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;X&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;MicroProfile Health 4.0&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&amp;#8201;&amp;#8212;&amp;#8201;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;X&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;MicroProfile JWT Authentication 2.1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;X&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;X&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;MicroProfile LRA 2.0&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&amp;#8201;&amp;#8212;&amp;#8201;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;X&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;MicroProfile OpenAPI 3.1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&amp;#8201;&amp;#8212;&amp;#8201;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;X&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;MicroProfile Open Telemetry 1.0&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&amp;#8201;&amp;#8212;&amp;#8201;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;X&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;MicroProfile Reactive Messaging 3.0&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&amp;#8201;&amp;#8212;&amp;#8201;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&amp;#8201;&amp;#8212;&amp;#8201;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;MicroProfile Reactive Streams Operators 3.0&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&amp;#8201;&amp;#8212;&amp;#8201;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&amp;#8201;&amp;#8212;&amp;#8201;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;MicroProfile Rest Client 3.0&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;X&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;X&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/wildfly/certifications/blob/MP6.0/WildFly_30.0.0.Final/microprofile-6.0-selected-specifications/microprofile-6.0-selected-specifications-certification.adoc&quot;&gt;Compatibility evidence&lt;/a&gt; for the above specifications that are part of MicroProfile 6.0 can be found in the WildFly Certifications repository on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;java-se-support&quot;&gt;Java SE Support&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;recommended-se-versions&quot;&gt;Recommended SE Versions&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our recommendation is that you run WildFly 30 on Java SE 17, as that is the latest LTS JDK release where we have completed the full set of testing we like to do before recommending a particular SE version. WildFly 30 also is heavily tested and runs well on Java 11. Our recommendation of SE 17 over 11 is solely because we recommend as a general principle being on later LTS releases, not because of any problems with WildFly on SE 11.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One reason to use later SE versions is because it gets you ahead of the curve as WildFly and other projects begin to move on from supporting older SE releases.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At this point it is likely that &lt;strong&gt;WildFly 30 will be the last release where support SE 11&lt;/strong&gt;. There is some possibility we will continue to support SE 11 in WildFly 31, but we have no plans to support it beyond then. As our focus and the focus of the broader Java ecosystem moves toward SE 21 and later, we need to shift focus away from SE 11.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please note that WildFly runs in classpath mode.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;java-se-21&quot;&gt;Java SE 21&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I am very pleased to be able to say that WildFly 30 runs well on SE 21, the latest LTS release. By &quot;runs well&quot; I mean that we get the same results on SE 21 when running WildFly&amp;#8217;s and WildFly Core&amp;#8217;s own extensive test suites as we do when running SE 17 or SE 11.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As noted above, we also pass the Jakarta EE 10 Core Profile TCK when running on SE 21, as well as the MicroProfile TCKs for the various specifications we support.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We do not yet include SE 21 in the preceding &quot;Recommended SE Versions&quot; section because:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We have not completed our program of seeing how WildFly on SE 21 does on the Jakarta EE Full Platform and Web Profile TCKs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We need to do further investigation into how the projects producing the various libraries we integrate are testing on SE 21.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are trying to evaluate what SE 21 means for your applications, I encourage you to look to WildFly 30 as your evaluation platform.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;move-to-asl-2-0&quot;&gt;Move to ASL 2.0&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;During the WildFly 30 development cycle we moved the &lt;a href=&quot;https://github.com/wildfly/wildfly&quot;&gt;main WildFly source code&lt;/a&gt; and the &lt;a href=&quot;https://github.com/wildfly/wildfly-core&quot;&gt;WildFly Core source code&lt;/a&gt; from the Lesser General Public License 2.1 to the Apache Software License 2.0. This is something we&amp;#8217;ve long wanted to do, and started doing in WildFly Core many years ago. So I&amp;#8217;m very pleased that we&amp;#8217;ve been able to take this step.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please note that when you run WildFly you are running software provided by a large number of component libraries that WildFly integrates, with those components licensed under a variety of open source licenses. The components provided by the WildFly and WildFly Core projects that we&amp;#8217;ve shifted to ASL 2.0 are just a subset of what we integrate. The complete set of licensing information about the libraries found in a WildFly installation can be found in the &lt;code&gt;docs/licenses/licenses.html&lt;/code&gt; folder in the WildFly installation, along with the same information in XML format and a copy of all of the relevant licenses.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;release-notes&quot;&gt;Release Notes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The full release notes for the release are in the &lt;a href=&quot;https://issues.redhat.com/secure/ReleaseNote.jspa?projectId=12313721&amp;amp;version=12413594&quot;&gt;WildFly JIRA&lt;/a&gt;.  Issues fixed in the  underlying &lt;a href=&quot;https://issues.redhat.com/browse/WFCORE-4296?filter=12423012&quot;&gt;WildFly Core 22&lt;/a&gt; releases are listed in the WildFly Core JIRA.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please try it out and give us your feedback, in the &lt;a href=&quot;https://groups.google.com/g/wildfly&quot;&gt;WildFly google group&lt;/a&gt;, &lt;a href=&quot;https://wildfly.zulipchat.com/#narrow/stream/196266-wildfly-user&quot;&gt;Zulip&lt;/a&gt; or &lt;a href=&quot;https://issues.redhat.com/projects/WFLY/summary&quot;&gt;JIRA&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Meanwhile, we&amp;#8217;re busy at work on WildFly 31!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Best regards,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Brian&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
      

      
      
      
      
      

      
        <author>
          <name>Brian Stansberry</name>
          
          
        </author>
      

      
        
      

      
        <category term="announcement" />
      
        <category term="release" />
      

      
        <summary type="html">I&amp;#8217;m pleased to announce that the new WildFly and WildFly Preview 30.0.0.Final releases are available for download at https://wildfly.org/downloads.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Hacktoberfest 2023</title>
      <link href="https://hpehl.github.io/wildfly.org/news/2023/09/27/Hacktoberfest-2023/" rel="alternate" type="text/html" title="Hacktoberfest 2023" />
      <published>2023-09-27T00:00:00+02:00</published>
      <updated>2023-09-27T00:00:00+02:00</updated>
      <id>https://hpehl.github.io/wildfly.org/news/2023/09/27/Hacktoberfest-2023</id>
      
      
        <content type="html" xml:base="https://hpehl.github.io/wildfly.org/news/2023/09/27/Hacktoberfest-2023/">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/img/news/hacktoberfest/hacktoberfest2023.png&quot; alt=&quot;Content Browser&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://hacktoberfest.com/&quot;&gt;Hacktoberfest&lt;/a&gt; is back, and it&amp;#8217;s time to channel your inner Open Source superhero! This annual event unites developers of all levels, from seasoned pros to enthusiastic beginners, in a shared mission to contribute to Open Source projects and celebrate the spirit of collaboration in software development. Join us for this month-long celebration of contributions as we work together, one pull request at a time.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;what-is-hacktoberfest&quot;&gt;What is Hacktoberfest?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hacktoberfest is a month-long event in October that encourages Open Source contributors and developers worldwide to give back to the global tech community. It&amp;#8217;s a fantastic opportunity for the contributors to showcase their skills and get to know about other Open Source communities.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To participate you simply need to:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Register:&lt;/strong&gt; &lt;a href=&quot;https://hacktoberfest.com/auth/&quot;&gt;Sign up&lt;/a&gt; on the official Hacktoberfest website to get started.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Discover Projects:&lt;/strong&gt; Explore the Hacktoberfest website to find a project that sparks your interest. You can also check out the curated list of projects we&amp;#8217;ve prepared for you.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Follow the Project guidelines:&lt;/strong&gt; Read the respective Contributing Guide, Code of Conduct, and follow best practices like forking the repository, creating a new branch, and making a meaningful contribution.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Contribute:&lt;/strong&gt; Select an issue that matches your interest and start working on it. You&amp;#8217;ll have the option to have a tree planted in your name and a unique digital reward as a token of appreciation.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;get-started-with-our-projects&quot;&gt;Get started with our projects&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This list contains some really interesting projects that are under the WildFly umbrella, waiting for your magic touch. There’s something for everyone from Java to Ansible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;WildFly:&lt;/strong&gt; WildFly is a powerful, modular, and lightweight application server that empowers you to build amazing applications.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Here are the &lt;a href=&quot;https://github.com/wildfly/wildfly&quot;&gt;GitHub repository&lt;/a&gt;, &lt;a href=&quot;https://github.com/wildfly/wildfly/blob/main/CONTRIBUTING.md&quot;&gt;Contributing Guide&lt;/a&gt;, and &lt;a href=&quot;https://issues.redhat.com/issues/?filter=12421535&quot;&gt;Hacktoberfest Issues link&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;WildFly Elytron:&lt;/strong&gt; WildFly Elytron is a set of APIs and SPIs for application server security and client side security. Within the WildFly server, WildFly Elytron is used to secure applications deployed to the server as well as management access to the server. It is a standalone library that can also be used in other Java server environments.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Here are the &lt;a href=&quot;https://github.com/wildfly-security/wildfly-elytron&quot;&gt;GitHub repository&lt;/a&gt;, &lt;a href=&quot;https://github.com/wildfly-security/wildfly-elytron/blob/2.x/CONTRIBUTING.md&quot;&gt;Contributing Guide&lt;/a&gt;, and &lt;a href=&quot;https://issues.redhat.com/issues/?filter=12383825&quot;&gt;Hacktoberfest Issues link&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For more details, check out WildFly Elytron&amp;#8217;s Hacktoberfest &lt;a href=&quot;https://wildfly-security.github.io/wildfly-elytron/hacktoberfest/&quot;&gt;page&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Ansible Middleware:&lt;/strong&gt; Ansible Middleware is a suite of supported content that combines the power of Ansible automation with Red Hat&amp;#8217;s Middleware portfolio. It allows organizations to meet their business demands and automate the installation, configuration, and management of Enterprise Middleware.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Here are the &lt;a href=&quot;https://github.com/ansible-middleware&quot;&gt;GitHub repositories&lt;/a&gt;, &lt;a href=&quot;https://github.com/ansible-middleware/keycloak/blob/main/CONTRIBUTING.md&quot;&gt;Contributing Guide&lt;/a&gt;, and &lt;a href=&quot;https://github.com/search?q=org%3Aansible-middleware+state%3Aopen+label%3Ahacktoberfest&amp;amp;type=issues&quot;&gt;Hacktoberfest Issues link&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Undertow:&lt;/strong&gt; Undertow is a versatile and high-performance web server that provides both blocking and non-blocking APIs based on NIO. Its modular architecture allows you to build a web server tailored to your needs, from a full Java EE servlet container to a low-level non-blocking handler.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Here are the &lt;a href=&quot;https://github.com/undertow-io/undertow&quot;&gt;GitHub repository&lt;/a&gt;, &lt;a href=&quot;https://github.com/undertow-io/undertow/blob/master/CONTRIBUTING.md&quot;&gt;Contributing Guide&lt;/a&gt;, and &lt;a href=&quot;https://issues.redhat.com/issues/?filter=12422070&quot;&gt;Hacktoberfest Issues link&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;WildFly Core:&lt;/strong&gt; WildFly Core provides the core runtime that is used by the Wildfly application server. This includes Modular class loading, Unified management including domain mode, Basic deployment architecture, and CLI for management.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Here are the &lt;a href=&quot;https://github.com/wildfly/wildfly-core&quot;&gt;GitHub repository&lt;/a&gt;, &lt;a href=&quot;https://github.com/wildfly/wildfly-core/blob/main/CONTRIBUTING.md&quot;&gt;Contributing Guide&lt;/a&gt;, and &lt;a href=&quot;https://issues.redhat.com/issues/?filter=12421536&quot;&gt;Hacktoberfest Issues link&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Narayana:&lt;/strong&gt; Narayana is a transactions toolkit that provides support for applications using various standards-based transaction protocols. It&amp;#8217;s an essential component of the WildFly application server and continues to be developed as a standalone transaction manager.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Here are the &lt;a href=&quot;https://github.com/jbosstm/narayana&quot;&gt;GitHub repository&lt;/a&gt;, &lt;a href=&quot;https://github.com/jbosstm/narayana/blob/main/CONTRIBUTING.md&quot;&gt;Contributing Guide&lt;/a&gt;, and &lt;a href=&quot;https://issues.redhat.com/issues/?filter=12421681&quot;&gt;Hacktoberfest Issues link&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;WildFly GitHub Bot:&lt;/strong&gt; WildFly GitHub Bot is a small easy-to-start application that we utilize to manage the workflow of WildFly&amp;#8217;s Pull Requests. It, for instance, requires reviews from relevant reviewers or sets labels based on the PR&amp;#8217;s state. We have a lot of ideas that you can start implementing.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Here are the &lt;a href=&quot;https://github.com/wildfly/wildfly-github-bot&quot;&gt;GitHub repository&lt;/a&gt;, &lt;a href=&quot;https://github.com/wildfly/wildfly-github-bot/blob/main/CONTRIBUTING.md&quot;&gt;Contributing Guide&lt;/a&gt;, and &lt;a href=&quot;https://github.com/wildfly/wildfly-github-bot/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22&quot;&gt;Hacktoberfest Issues link&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;how-to-reach-out-to-us-for-hacktoberfest-related-queries&quot;&gt;How to reach out to us for Hacktoberfest related queries?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please join our &lt;a href=&quot;https://wildfly.zulipchat.com/#narrow/stream/Hacktoberfest&quot;&gt;Hacktoberfest Zulip chatroom&lt;/a&gt; and reach out to us if you have any queries or need assistance. We’re here to ensure a smooth journey for you.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s make Hacktoberfest 2023 the most exciting and impactful one yet! Your contributions matter, and together, we can make a difference.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
      

      
      
      
      
      

      
        <author>
          <name>Ranabir Chakraborty</name>
          
          
        </author>
      

      
        
      

      
        <category term="Hacktoberfest" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  

</feed>

